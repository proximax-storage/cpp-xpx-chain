pipeline {
	agent {
        label 'catapult-build-node'
    }
	stages {
        stage ('git') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: scm.branches,
                    doGenerateSubmoduleConfigurations: false,
                    extensions: scm.extensions + [[$class: 'SubmoduleOption', disableSubmodules: false, recursiveSubmodules: true, reference: '', trackingSubmodules: false]],
                    submoduleCfg: [],
                    userRemoteConfigs: scm.userRemoteConfigs])
            }
        }
		stage ('build') {
            steps {
                sh """
                    echo 'Building catapult-server'
                    rm -rf _build
                    mkdir _build 
                    cd _build
                    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-pthread" -DPYTHON_EXECUTABLE=/usr/bin/python3 -DBSONCXX_LIB=/usr/local/lib/libbsoncxx.so -DMONGOCXX_LIB=/usr/local/lib/libmongocxx.so .. 
		            make -j4 publish
                    make -j4
                """
            }
		}
        stage('test') {
            steps {
                sh """
                    echo 'Running unit tests'
                    # Disable exit on non 0
                    set +e
                    cd _build
                    # pipe to true to prevent exit failure
                    ctest -T Test --no-compress-output || true
                """
            }
            post {
                always {
                    xunit (
                        thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],
                        tools: [ CTest(pattern: "_build/Testing/**/*.xml") ]
                    )
                }
            }
        }
        stage('deploy') {
            when {
                branch 'master'
            }
            steps {
                sh "echo 'TODO: Deploying catapult-server'"
            }
        }
	}
}