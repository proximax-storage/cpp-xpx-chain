pipeline {
	agent none

    // using the Timestamper plugin we can add timestamps to the console log
    options {
        timestamps()
    }

    environment {
        DOCKER_REGISTRY = "249767383774.dkr.ecr.ap-southeast-1.amazonaws.com"
        CREDENTIAL_ID = "ecr:ap-southeast-1:jenkins-ecr"
        IMAGE = "proximax-sirius-chain"
    }

	stages {
        stage ('Multi-architecture Docker Build and Push'){
            when {
                anyOf {
                    tag 'v*-bookworm';
                    tag 'v*-bullseye';
                    tag "release-sc-develop-r1"
                }
            }
            parallel {
                stage('Build on AMD64'){
                    agent {
                        label 'docker-c5-xlarge'
                    }
                    steps {
                        echo 'Build and Publish Image'
                        script {
                            def newImage = docker.build("${IMAGE}","-f ./scripts/catapult-server-docker/DockerfileDebian .")
                            docker.withRegistry("https://${DOCKER_REGISTRY}", "${CREDENTIAL_ID}"){
                                newImage.push("${env.GIT_BRANCH}-amd64") // if a tag commit, then env.GIT_BRANCH returns the tag name instead of a branch
                            }
                        }
                    }
                }

                stage('Build on ARM64'){
                    agent {
                        label 'docker-c6g-xlarge'
                    }

                    steps {
                        echo 'Build and Publish Image'
                        script {
                            def newImage = docker.build("${IMAGE}","-f ./scripts/catapult-server-docker/DockerfileDebian .")
                            docker.withRegistry("https://${DOCKER_REGISTRY}", "${CREDENTIAL_ID}"){
                                newImage.push("${env.GIT_BRANCH}-arm64") // if a tag commit, then env.GIT_BRANCH returns the tag name instead of a branch
                            }
                        }
                    }
                }
            }
        }
        stage('Build Manifest and Push'){
            agent {
                label 'docker-c6g-xlarge'
            }
            steps {
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", "${CREDENTIAL_ID}"){
                        sh """
                            docker manifest create ${DOCKER_REGISTRY}/${IMAGE}:${env.GIT_BRANCH} ${DOCKER_REGISTRY}/${IMAGE}:${env.GIT_BRANCH}-arm64 ${DOCKER_REGISTRY}/${IMAGE}:${env.GIT_BRANCH}-amd64
                            docker manifest push ${DOCKER_REGISTRY}/${IMAGE}:${env.GIT_BRANCH}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            slackSend channel: '#devops',
                color: 'good',
                message: "Branch *${env.GIT_BRANCH}* build of *${currentBuild.fullDisplayName}* completed successfully :100:\nPushed Docker images ${DOCKER_REGISTRY}/${IMAGE}:${env.GIT_BRANCH}"
        }
        failure {
            slackSend channel: '#devops',
              color: 'bad',
              message: "Branch *${env.GIT_BRANCH}* of *${currentBuild.fullDisplayName}* FAILED :scream:"
        }
    }
}
